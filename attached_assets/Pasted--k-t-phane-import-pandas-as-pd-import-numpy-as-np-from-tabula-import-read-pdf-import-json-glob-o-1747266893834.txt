#kütüphane
import pandas as pd
import numpy as np
from tabula import read_pdf
import json,glob,os,fitz  # fitz için pip install PyMuPDF

dosya = r"401.12.01-2025.335996_1.pdf"

#kütüphane 19,3 saniye
def read_pdf_until_second_match(pdf_path, search_text):
    doc = fitz.open(pdf_path)
    if len(doc) < 5:
        return "all"
    else:
    
        matched_pages = []
        
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text = page.get_text()
            if search_text in text:
                matched_pages.append(page_num + 1)  # Sayfa numarasını kaydedin (+1 çünkü sayma 0'dan başlar)
            if len(matched_pages) == 2:  # İkinci eşleşmeyi bulduğumuzda döngüyü durdur
                break
        
        doc.close()
        return f"1-{matched_pages[1]}" if len(matched_pages) >= 2 else "all"
    # return matched_pages[1] if len(matched_pages) >= 2 else "all"
df = read_pdf(dosya, pages=read_pdf_until_second_match(dosya, "SIRA NO"), multiple_tables=True, lattice=True, pandas_options={'header': None})

sorgulanan_bilgiler = df[1]


#ARAMA-ARANMA -->  abone_bilgiler, sonuc, gsm, en_uzun_gorusmeler, gsm_gruplu_birlesik
if df[1].iloc[-1,-1] in ("İletişimin Tespiti (Arama - Aranma - Mesaj Atma - Mesaj Alma)", 'İletişimin Tespiti (Aranma - Arama - Mesaj Alma - Mesaj Atma)'):
    tablo_all_kullanici = lambda df: 2 if len(df) <= 2 else next((i for i, d in enumerate(df[2:], start=2) if np.isin("SIRA NO", d.loc[:, 0].values)), len(df))
    abone_bilgiler = pd.concat(df[2:tablo_all_kullanici(df)], ignore_index=True)
    abone_bilgiler.replace('\r', ' ', regex= True, inplace=True)
    abone_bilgiler = abone_bilgiler.rename(columns=abone_bilgiler.iloc[1]).drop([0,1],axis=0).reset_index(drop=True)
    # json_veri["abone_bilgiler"] =abone_bilgiler.to_json(orient='records')
    
    tablo_all = lambda df: 4 if len(df) <= 3 else next((i for i, d in enumerate(df[4:], start=4) if np.isin("SIRA NO", d.loc[:, 0].values)), len(df))
    gsm = pd.concat(df[3:tablo_all(df)], ignore_index=True)
    gsm = gsm.rename(columns=gsm.iloc[1]).drop([0,1],axis=0).reset_index(drop=True) # TEK SATIRDA ÜÇ İŞLME CHATGBT ile
    gsm["NUMARA"] = pd.to_numeric(gsm["NUMARA"]).astype('int64')
    gsm = gsm[~gsm["TİP"].str.contains("Yönlendirme", na=False)]
    gsm.fillna(0,inplace= True)
    gsm['TARİH'] = pd.to_datetime(gsm['TARİH'] ,dayfirst=True)
    gsm["IMEI"] = pd.to_numeric(gsm["IMEI"]).astype('int64')
    gsm["SIRA NO"] = pd.to_numeric(gsm["SIRA NO"]).astype('int64')
    gsm['salt_sure'] = np.where(len(gsm) > 1, gsm["SÜRE"].str[:-4].astype(int), 0)

    if sorgulanan_bilgiler.iloc[-1,-1] == 'İletişimin Tespiti (Aranma - Arama - Mesaj Alma - Mesaj Atma)':
        gsm[['NUMARA', 'DİĞER NUMARA']] = gsm[['DİĞER NUMARA', 'NUMARA']]
        gsm.rename(columns={"İsim Soyisim (  Numara)": "İsim Soyisim ( Diğer Numara)","TC Kimlik No ( Numara)" :"TC Kimlik No (Diğer Numara)", "IMEI": "IMEIL(Diğer Numara)", "BAZ (Numara)": "BAZ (Diğer Numara)"}, inplace=True)
    # json_veri["gsm"] =gsm.to_json(orient='records')


    def process_gsm_data(gsm):
        def get_df(tip, column_name, gsm):
            data = gsm[gsm["TİP"] == tip]["İsim Soyisim ( Diğer Numara)"].value_counts().reset_index()
            data.columns = ["index", column_name]
            return data

        if len(gsm) > 1:
            ara_kis_df = get_df("Aradı", "Arama Sayısı", gsm)
            aran_kis_df = get_df("Arandı", "Aranma Sayısı", gsm)
            mesaj_attigi_df = get_df("Mesaj attı", "Giden Mesajlar", gsm)
            mesaj_aldigi_df = get_df("Mesaj aldı", "Gelen Mesajlar", gsm)

            sonuc = (ara_kis_df.merge(aran_kis_df, on='index', how='left')
                    .merge(mesaj_attigi_df, on='index', how='left')
                    .merge(mesaj_aldigi_df, on='index', how='left').fillna(0))

            for col in ["Aranma Sayısı", "Giden Mesajlar", "Gelen Mesajlar"]:
                sonuc[col] = sonuc[col].astype(np.int64)

            sonuc["Toplam Görüşme"] = sonuc.iloc[:, 1:].sum(axis=1)
            sonuc = (sonuc.sort_values(by='Toplam Görüşme', ascending=False)
                    .rename(columns={"index": "isim"})
                    .rename(str.lower, axis='columns')
                    .replace("Kayıt Bulunamadı", np.nan).dropna().head())
        else:
            bos = {'isim': [], 'arama sayısı': [], 'aranma sayısı': [], 'giden mesajlar': [], 'gelen mesajlar': [], 'toplam görüşme': []}
            sonuc = pd.DataFrame(bos)
        return sonuc

    sonuc = process_gsm_data(gsm)
    # json_veri["sonuc"] =sonuc.to_json(orient='records')
    #tek seferda yapılan arama/aranmada 5 en uzun görüşmeler
    en_uzun_gorusmeler = gsm.sort_values(by='salt_sure',ascending=False).drop(columns=['BAZ (Numara)', 'salt_sure']).head()
    # json_veri["en_uzun_gorusmeler"] =en_uzun_gorusmeler.to_json(orient='records')
    #en çok görüşülen 5 kişiyle yapılan en uzub 5 görüşme
    sonuc_toplam = sonuc["isim"].head()
    gsm_gruplu = gsm[gsm["İsim Soyisim ( Diğer Numara)"].isin(sonuc_toplam)].groupby("İsim Soyisim ( Diğer Numara)")
    gsm_gruplu_birlesik = pd.concat([gsm_gruplu.get_group(x).sort_values(by="salt_sure",ascending=False).head() for x in gsm_gruplu.groups] or [pd.DataFrame()]) #gsm_gruplu_birlesik.to_dict(orient='records')
    gsm_gruplu_birlesik =gsm_gruplu_birlesik.drop(columns=['BAZ (Numara)', 'salt_sure'])
    # json_veri["gsm_gruplu_birlesik"] =gsm_gruplu_birlesik.to_json(orient='records')
#kullanicilar
elif df[1].iloc[-1,-1]==  'IMEI KULLANAN NUMARA SORGU SONUÇLARI':
    tablo_all = lambda df: 2 if len(df) <= 2 else next((i for i, d in enumerate(df[2:], start=2) if np.isin("SIRA NO", d.loc[:, 0].values)), len(df))
    kullanicilar = pd.concat(df[2:tablo_all(df)], ignore_index=True)
    kullanicilar = kullanicilar.rename(columns=kullanicilar.iloc[1]).drop([0,1],axis=0).reset_index(drop=True)
    kullanicilar = kullanicilar.iloc[:-6]
    kullanicilar.columns = kullanicilar.columns.str.replace('\r', ' ')
    kullanicilar.replace(to_replace="\r", value=" ", regex=True, inplace=True) ############## KULLANICLILAR
    kullanicilar["ABONE BASLANGIÇ"] = pd.to_datetime(kullanicilar["ABONE BASLANGIÇ"], format="%d.%m.%Y")
    # ABONE BASLANGIÇ tarihine göre sıralama
    kullanicilar = kullanicilar.sort_values(by="ABONE BASLANGIÇ")
    # Tarih formatını gün.ay.yıl olarak değiştirme
    kullanicilar["ABONE BASLANGIÇ"] = kullanicilar["ABONE BASLANGIÇ"].dt.strftime("%d/%m/%Y")
    # NaN değerlerini "-" ile değiştirme
    kullanicilar.fillna("-", inplace=True)
    # json_veri["kullanicilar"] =kullanicilar.to_json(orient='records',)


#kullanicilar Abone Sorgusu
elif df.iloc[-1, -1].startswith("Abone Sorgusu"):
    tablo_all = lambda df: 2 if len(df) <= 2 else next((i for i, d in enumerate(df[2:], start=2) if np.isin("SIRA NO", d.loc[:, 0].values)), len(df))
    kullanicilar = pd.concat(df[2:tablo_all(df)], ignore_index=True)
    kullanicilar = kullanicilar.rename(columns=kullanicilar.iloc[1]).drop([0,1],axis=0).reset_index(drop=True)
    kullanicilar = kullanicilar.iloc[:-8]
    kullanicilar.columns = kullanicilar.columns.str.replace('\r', ' ')
    kullanicilar.replace(to_replace="\r", value=" ", regex=True, inplace=True)
    # Tarih sütunlarını datetime formatına çevirme
    kullanicilar["ABONE BASLANGIÇ"] = pd.to_datetime(kullanicilar["ABONE BASLANGIÇ"], format="%d.%m.%Y")
    kullanicilar["ABONE BİTİŞ"] = pd.to_datetime(kullanicilar["ABONE BİTİŞ"], format="%d.%m.%Y")

    # ABONE BASLANGIÇ tarihine göre sıralama
    kullanicilar = kullanicilar.sort_values(by="ABONE BASLANGIÇ")
    # Tarih formatını gün.ay.yıl olarak değiştirme
    kullanicilar["ABONE BASLANGIÇ"] = kullanicilar["ABONE BASLANGIÇ"].dt.strftime("%d/%m/%Y")
    kullanicilar["ABONE BİTİŞ"] = kullanicilar["ABONE BİTİŞ"].dt.strftime("%d/%m/%Y")
    # json_veri["kullanicilar"] =kullanicilar.to_json(orient='records',force_ascii=False)


#kullanicilar, gsm_veri
elif df[1].iloc[-1,-1]==  'Numara / Imei Kullanımı':
    #KULLANICILAR
    df[2].replace('\r', ' ', regex= True, inplace=True) #  karakter değişimi
    kullanicilar = df[2].rename(columns=df[2].iloc[1]).drop([0,1],axis=0).reset_index(drop=True)# kolon adlarını değiştirip ilk iki satırı siliyoruz
    kullanicilar.rename(columns=lambda x: x.replace('\r', ''), inplace=True) # kolon adındanki satırı karakter değişim
    kullanicilar['NUMARA'] = kullanicilar['NUMARA'].str.replace(' ', '') # 'NUMARA' sütununda boşlukları kaldırma işlemini gerçekleştirelim
    kullanicilar["NUMARA"] =kullanicilar["NUMARA"].astype('int64')
    # "AD SOYAD" kolonunu 4. sütuna taşıyalım ve "AD" ile "SOYAD" sütunlarını silelim
    kullanicilar.insert(4, 'AD SOYAD', kullanicilar['AD'] + ' ' + kullanicilar['SOYAD'])
    kullanicilar.drop(['AD', 'SOYAD'], axis=1, inplace=True)

    #GSM
    tablo_all = lambda df: 4 if len(df) <= 3 else next((i for i, d in enumerate(df[4:], start=4) if np.isin("SIRA NO", d.loc[:, 0].values)), len(df))
    gsm = pd.concat(df[3:tablo_all(df)], ignore_index=True)
    gsm.rename(columns=gsm.iloc[1], inplace=True)
    gsm = gsm.drop([0, 1]).reset_index(drop=True)
    gsm["IMEI"].fillna(0,inplace=True)
    gsm["NUMARA"].fillna(0,inplace=True)
    gsm["IMEI"] = gsm["IMEI"].astype(str).apply(lambda x: x[:-1] if len(x) == 15 else x)
    gsm["IMEI"] = pd.to_numeric(gsm["IMEI"]).astype('int64')
    gsm["NUMARA"] = pd.to_numeric(gsm["NUMARA"]).astype('int64')
    gsm['SIRA NO']= pd.to_numeric(gsm['SIRA NO']).astype('int64')
    gsm['TARİH'] = pd.to_datetime(gsm['TARİH'] ,dayfirst=True)
    # IMEİL değerlerinin hepsini int tipine çevrildi
    # Adım 1: Benzersiz IMEI değerlerini alın ve NaN değerleri çıkarın
    unique_imeis = gsm["IMEI"].dropna().unique()
    # Adım 2: Her değeri sayıya çevirerek yeni bir liste oluşturun
    numeric_imeis = [int(imei) for imei in unique_imeis]
    # Adım 3: "IMEI" sütununu güncelleyin
    gsm["IMEI"] = gsm["IMEI"].apply(lambda imei: int(imei) if pd.notnull(imei) else imei)
    #EĞER IMEI 15 KARAKTERDEN FAZLA İSE SON SON KARAKTERİ SİLİYORUZ
    gsm["IMEI"] = gsm["IMEI"].astype(str).apply(lambda x: x[:-1] if len(x) == 15 else x)


    #UYGULAMANIN ÖZÜ
    def process_periods(gsm, col_name):
        # Sort data by 'TARİH'
        # gsm.sort_values(by='TARİH', inplace=True)
        # Correcting the code to consider the use period ending when the column value changes or when the dataset ends
        use_periods_corrected = []
        # Iterate over each row in sorted dataframe
        for i in range(len(gsm)):
            # Start of a new use period
            if i == 0 or gsm.iloc[i][col_name] != gsm.iloc[i-1][col_name]:
                start = gsm.iloc[i]['TARİH']
                value = gsm.iloc[i][col_name]
            # End of a use period
            if i == len(gsm) - 1 or gsm.iloc[i][col_name] != gsm.iloc[i+1][col_name]:
                end = gsm.iloc[i]['TARİH']
                use_periods_corrected.append([start, end, value])
        # Convert the list to a DataFrame
        corrected_df = pd.DataFrame(use_periods_corrected, columns=['BASLANGIC', 'BITIS', col_name])
        corrected_df["kullandigi_sure"] = corrected_df["BITIS"] - corrected_df["BASLANGIC"]
        corrected_df['BASLANGIC'] = pd.to_datetime(corrected_df['BASLANGIC']).dt.strftime('%d.%m.%Y %H:%M:%S')
        corrected_df['BITIS'] = pd.to_datetime(corrected_df['BITIS']).dt.strftime('%d.%m.%Y %H:%M:%S')
        return corrected_df

    # ZAMAN DİLİMİNİ TÜRKEÇEYE ÇEVİRİYORUZ
    def timedelta_to_turkish_str(td):
        days = td.days
        hours, remainder = divmod(td.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        # Format the string based on the duration
        if days > 0:
            return f"{days} gün {hours} saat {minutes} dakika {seconds} saniye"
        elif hours > 0:
            return f"{hours} saat {minutes} dakika {seconds} saniye"
        elif minutes > 0:
            return f"{minutes} dakika {seconds} saniye"
        else:
            return f"{seconds} saniye"


    #SON İŞLEMLER DİYARI
    if df[1].iloc[1,0] == 'Sorgulanan Telefon No :' and df[1].iloc[-1,-1] == 'Numara / Imei Kullanımı':
        # Call the function for 'IMEI' column
        gsm_veri = process_periods(gsm, 'IMEI')
        gsm_veri['kullandigi_sure'] = gsm_veri['kullandigi_sure'].apply(timedelta_to_turkish_str)
        # gsm_veri = gsm_veri[(gsm_veri["kullandigi_sure"] != "0 saniye") & (gsm_veri["IMEI"] != "0")]
    elif df[1].iloc[1,0] == 'Sorgulanan IMEI :' and df[1].iloc[-1,-1] == 'Numara / Imei Kullanımı':
        gsm_veri = process_periods(gsm, 'NUMARA')
        gsm_veri['kullandigi_sure'] = gsm_veri['kullandigi_sure'].apply(timedelta_to_turkish_str)
        # gsm_veri = gsm_veri[gsm_veri["kullandigi_sure"] != "0 saniye"]
        gsm_veri = gsm_veri.merge(kullanicilar[['NUMARA', 'TC KİMLİK NO','AD SOYAD']], on='NUMARA', how='left')[[*gsm_veri.columns[:3], 'TC KİMLİK NO','AD SOYAD', *gsm_veri.columns[3:]]]



telefonGorusme =gsm.drop(columns=['BAZ (Numara)', 'SÜRE']).to_dict(orient='records')
